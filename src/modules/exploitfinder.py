from modules.command_interface import Command
import pyxploitdb
import yaml
import json
import requests
from requests.exceptions import ConnectionError, Timeout
import argparse
from libs.colors import Colors
import webbrowser

from modules.command_interface import Command

class ExploitFinderCommand(Command):
    def __init__(self, tosca_data):
        self.tosca_data = tosca_data

    def read_tosca_file(self, filename):
        with open(filename, 'r') as file:
            return yaml.safe_load(file)

    def write_tosca_file(self, data, filename):
        with open(filename, 'w') as file:
            yaml.dump(data, file, sort_keys=False)

    def search_vulnerabilities(self, app_name, app_version):
      try:
            print(f"Searching ExploitDB for {app_name}...")
            results = pyxploitdb.searchEDB(app_name, platform="", _print=False, nb_results=10)
            return results
      except Exception as e:
            print(f"Error while searching for vulnerabilities: {e}")
            return []
      
    def search_cve(self, cve):
      try:
            print(f"Searching ExploitDB for {cve}...")
            results = pyxploitdb.searchCVE(cve)
            return results
      except Exception as e:
            print(f"Error while searching for vulnerabilities: {e}")
            return []

    def execute(self, node_name, node, filename=''):
        if node and node.get('type') == 'pts_vulnerability':
            cve = node['properties'].get('CVE')
            #app_version = node['properties'].get('app_version')

            print(f"Searching CVE {cve}")
            exploits = self.search_cve(cve)
            print(exploits)

            if exploits:
                print(Colors.GREEN+"\Exploit found:\n")
                for i, exploit in enumerate(exploits, 1):
                    #print(vulnerability)
                    description = getattr(exploit, 'description', 'No description available')
                    exploit_id = getattr(exploit, 'id', 'N/A')
                    print(Colors.FAIL)
                    print(f"{i}. ExploitDb ID: {exploit_id}{Colors.ENDC}")
                    print(f"Description: {description} \nDetails: {exploit}\n")
                
                
                choice = input(Colors.ENDC+"Do you want to add one of these exploit to the TOSCA file? (yes/no): ").lower()
                if choice == 'yes':
                    exploit_index = int(input("Enter the number of the exploit to add: "))
                    selected_exploit = exploits[exploit_index - 1]
                    self.add_exploit_to_tosca(selected_exploit, node_name, filename)

                download = input(Colors.ENDC+"Would you like to see the exploit code in browser? (yes/no)").lower()
                if download == 'yes':
                    url = 'https://www.exploit-db.com/raw/'+str(exploit_id)
                    webbrowser.open(f"{url}", new=2)
                else:
                    print("Returning to main menu.")
            else:
                print(Colors.FAIL+"No vulnerabilities found or unable to search.")
        else:
            print("Invalid node type. This module only supports nodes of type 'pts_webapp'.")

    def add_exploit_to_tosca(self, exploit, node_name, filename):
        # Extract necessary information from the vulnerability
        exploit_description = getattr(exploit, 'description', 'No description available')
        exploit_id = getattr(exploit, 'id', 'unknown')
        link =  getattr(exploit, 'link', 'unknown') 
        platform = getattr(exploit, 'platform', 'unknown') 
        date = getattr(exploit, 'date_published', 'unknown') 

        # Create a new vulnerability node
        exploit_node = {
            'type': 'pts_exploit',
            'properties': {
                'CVE': exploit_id,  # Assuming exploit ID is the CVE, adjust as necessary
                'description': exploit_description,
                'exploit_url': link,
                'platform': platform,
                'date': date,
                'host' : node_name
            },
            'requirements': [{
                'host': {
                    'node': node_name,
                    'relationship': 'tosca.relationships.HostedOn'
                }
            }]
        }

        # Generate a unique name for the vulnerability node
        exploit_node_name = f"exploit_{exploit_id.replace('-', '_')}"

        # Add the vulnerability node to the TOSCA template
        if 'topology_template' not in self.tosca_data:
            self.tosca_data['topology_template'] = {'node_templates': {}}
        self.tosca_data['topology_template']['node_templates'][exploit_node_name] = exploit_node

        # Save the updated TOSCA data
        self.write_tosca_file(self.tosca_data, filename)
        print(f"Exploit node '{exploit_node_name}' added to TOSCA template.")

